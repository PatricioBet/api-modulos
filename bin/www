#!/usr/bin/env node

const app = require('../app');
const debug = require('debug')('pis-grupo-c-backend:server');
const http = require('http');
const models = require('../models/');
const cron = require('cron');
const axios = require('axios');

let server;

async function initializeDatabase() {
  try {
    await models.sequelize.sync();
    console.log('La base de datos se ha conectado correctamente');
  } catch (error) {
    console.error('Error al conectar con la base de datos:', error);
    process.exit(1);
  }
}

initializeDatabase().then(() => {
  const port = normalizePort(process.env.PORT || '3004');
  app.set('port', port);

  server = http.createServer(app);

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  const cronJob = new cron.CronJob('*/30 5-19 * * *', async () => {
    try {
      const dispositivosActivos = await models.dispositivo.findAll({
        where: { activo: true },
      });

      for (const dispositivo of dispositivosActivos) {
        const url = `http://${dispositivo.ip}/radiacion`;
        
        try {
          const response = await axios.get(url);
          console.log(response.data.info)
          const medicionData = {
            uv: parseFloat(response.data.info.uv), 
            fecha: new Date(), // Puedes ajustar la fecha según lo que necesites
            dispositivoId: dispositivo.id,
          };

          await models.medicion.create(medicionData);

          console.log(`Datos de ${dispositivo.nombre} registrados con éxito`);
        } catch (error) {
          console.error(`Error al hacer la petición GET a ${url}:`, error);
          
          // Actualiza el dispositivo a inactivo si hay un error en la petición
          await dispositivo.update({ activo: false });
        }
      }
    } catch (error) {
      console.error('Error al ejecutar la tarea cron:', error);
    }
  });

  cronJob.start();
});

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
